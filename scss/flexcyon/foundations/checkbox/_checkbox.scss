// The code snippets in this file are derived from the Halcyon theme
// - https://github.com/dbarenholz/halcyon-obsidian?tab=readme-ov-file
body {
  --checkbox-color: var(--flexcyon-purple-lilac);
  --checkbox-color-hover: var(--flexcyon-palette-lilac-hover);
  --checkbox-border-color: var(--flexcyon-blue);
  --checkbox-border-color-hover: var(--flexcyon-palette-lilac-hover);
  --flexcyon-ascii-checkboxes-font-size: 1.2rem;

  .checkbox-container {
    background-color: var(--flexcyon-red-salmon);
  }

  .checkbox-container.is-enabled {
    background-color: var(--flexcyon-lime-green);
  }
}

@mixin flexcyon-ascii-checkbox($data-task, $color) {
  input[data-task="#{$data-task}"]:checked,
  li[data-task="#{$data-task}"] > input:checked,
  li[data-task="#{$data-task}"] > p > input:checked {
    background-color: inherit;
    border: none;
    font-weight: 900;
    padding-right: 6px;

    &:hover {
      filter: brightness(1.25);
    }
  }

  input[data-task="#{$data-task}"]:checked::after,
  li[data-task="#{$data-task}"] > input:checked::after,
  li[data-task="#{$data-task}"] > p > input:checked::after {
    background-color: inherit;
    content: $data-task;
    color: $color;
    font-size: var(--flexcyon-ascii-checkboxes-font-size);
    text-align: center;
    -webkit-mask-image: none;
    mask-image: none;
    top: -0.325em;
  }
}

// Add code to tweak font size and stuff for $ and * checkboxes
body.flexcyon-ascii-checkboxes-enabled {
  @include flexcyon-ascii-checkbox("!", var(--color-purple));
  @include flexcyon-ascii-checkbox(">", var(--color-cyan));
  @include flexcyon-ascii-checkbox("i", var(--color-blue));
  @include flexcyon-ascii-checkbox("?", var(--color-pink));
  @include flexcyon-ascii-checkbox("#", var(--color-green));
  @include flexcyon-ascii-checkbox(".", var(--color-yellow));
  @include flexcyon-ascii-checkbox("<", var(--color-orange));
  @include flexcyon-ascii-checkbox("$", var(--color-red));

  @include flexcyon-ascii-checkbox("*", var(--color-purple));
  @include flexcyon-ascii-checkbox("'", var(--color-cyan));
  @include flexcyon-ascii-checkbox("@", var(--color-blue));
  @include flexcyon-ascii-checkbox("%", var(--color-pink));
  @include flexcyon-ascii-checkbox("+", var(--color-green));
  @include flexcyon-ascii-checkbox("-", var(--color-yellow));
  @include flexcyon-ascii-checkbox("/", var(--color-orange));
  @include flexcyon-ascii-checkbox("~", var(--color-red));

  input[data-task='"']:checked,
  li[data-task='"'] > input:checked,
  li[data-task='"'] > p > input:checked {
    background-color: inherit;
    border: none;
    font-weight: 900;
    padding-right: 6px;
  }

  input[data-task='"']:checked::after,
  li[data-task='"'] > input:checked::after,
  li[data-task='"'] > p > input:checked::after {
    content: "“";
    color: var(--color-green);
    background-color: inherit;
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) + 0.3rem);
    text-align: center;
    -webkit-mask-image: none;
    mask-image: none;
  }

  input[data-task="?"]:checked::after,
  li[data-task="?"] > input:checked::after,
  li[data-task="?"] > p > input:checked::after,
  input[data-task="!"]:checked::after,
  li[data-task="!"] > input:checked::after,
  li[data-task="!"] > p > input:checked::after {
    top: -0.15em;
  }

  input[data-task="'"]:checked::after,
  li[data-task="'"] > input:checked::after,
  li[data-task="'"] > p > input:checked::after {
    content: "‘";
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) + 0.3rem);
    top: -0.175rem;
  }

  input[data-task="i"]:checked::after,
  li[data-task="i"] > input:checked::after,
  li[data-task="i"] > p > input:checked::after {
    border: 1.5px solid var(--color-blue);
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) - 0.425rem);
    border-radius: 50%;
    padding-top: 10%;
    scale: 115%;
    margin-left: -1.5px;
    top: 0rem;
  }

  input[data-task="/"]:checked::after,
  li[data-task="/"] > input:checked::after,
  li[data-task="/"] > p > input:checked::after,
  input[data-task="<"]:checked::after,
  li[data-task="<"] > input:checked::after,
  li[data-task="<"] > p > input:checked::after,
  input[data-task=">"]:checked::after,
  li[data-task=">"] > input:checked::after,
  li[data-task=">"] > p > input:checked::after {
    transform: scaleY(1.1);
    top: -0.175rem;
  }

  input[data-task="."]:checked::after,
  li[data-task="."] > input:checked::after,
  li[data-task="."] > p > input:checked::after {
    content: "...";
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) - 0.2rem);
    letter-spacing: -0.5px;
    top: -0.175rem;
  }

  input[data-task="*"]:checked::after,
  li[data-task="*"] > input:checked::after,
  li[data-task="*"] > p > input:checked::after {
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) + 0.75rem);
    top: -0.175rem;
  }

  input[data-task="$"]:checked::after,
  li[data-task="$"] > input:checked::after,
  li[data-task="$"] > p > input:checked::after {
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) - 0.05rem);
    top: -0.175rem;
  }

  input[data-task="@"]:checked::after,
  li[data-task="@"] > input:checked::after,
  li[data-task="@"] > p > input:checked::after {
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) - 0.05rem);
    top: -0.225rem;
  }

  input[data-task="%"]:checked::after,
  li[data-task="%"] > input:checked::after,
  li[data-task="%"] > p > input:checked::after {
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) - 0.225rem);
    top: -0.175rem;
  }

  input[data-task="+"]:checked::after,
  li[data-task="+"] > input:checked::after,
  li[data-task="+"] > p > input:checked::after {
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) - 0.05rem);
    top: -0.175rem;
  }

  input[data-task="-"]:checked::after,
  li[data-task="-"] > input:checked::after,
  li[data-task="-"] > p > input:checked::after {
    font-size: calc(var(--flexcyon-ascii-checkboxes-font-size) + 0.2rem);
    top: -0.425rem;
    content: "--";
    margin-left: -7.5%;
    letter-spacing: var(--less-letter-spacing);
  }
}

@mixin nth-bullet-point($color-map: ()) {
  $max-index: 0;
  @each $index, $color in $color-map {
    $max-index: max($max-index, $index);
  }
  $interval: $max-index + 1;

  @each $index, $color in $color-map {
    .HyperMD-list-line:nth-of-type(#{$interval}n + #{$index})
      .list-bullet::after,
    ul :nth-of-type(#{$interval}n + #{$index}) .list-bullet::after {
      --list-marker-color: var(--color-#{$color});
    }
  }
}

body.flexcyon-rainbow-bullet-points {
  @include nth-bullet-point(
    (
      0: purple,
      1: cyan,
      2: blue,
      3: pink,
      4: green,
      5: yellow,
      6: orange,
      7: red,
    )
  );
}
